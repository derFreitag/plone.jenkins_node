---
# Install/configure everything related to web browsers

- name: Check firefox version installed
  shell: dpkg -s firefox-mozilla-build | grep "^Version" | cut -d" " -f2
  register: firefox_installed_version
  ignore_errors: True

- name: Check if firefox is installed
  shell: dpkg -s firefox-mozilla-build | grep "^Status" | cut -d" " -f2
  register: firefox_is_installed
  ignore_errors: True

# Firefox
- name: "Browsers: firefox: remove stock version from distro"
  become: yes
  apt:
    name=firefox
    state=absent

- name: "Browsers: firefox: remove custom version"
  become: yes
  apt:
    name=firefox-mozilla-build
    state=absent
  when: firefox_is_installed.stdout == 'install' and firefox_installed_version.stdout != '{{ firefox_version }}'

- name: "Browsers: firefox: install system dependencies"
  apt:
    pkg=firefox
    state=build-dep
  when: firefox_is_installed.stdout != 'install'

- name: "Browsers: firefox: download"
  get_url:
    url="https://sourceforge.net/projects/ubuntuzilla/files/mozilla/apt/pool/main/f/firefox-mozilla-build/{{ firefox_file_name }}"
    dest=/tmp
    checksum="sha512:{{ firefox_checksum }}"
  when: firefox_is_installed.stdout != 'install' or firefox_installed_version.stdout != '{{ firefox_version }}'

- name: "Browsers: firefox: install"
  become: yes
  apt:
    deb="/tmp/{{ firefox_file_name }}"
  when: firefox_is_installed.stdout != 'install' or firefox_installed_version.stdout != '{{ firefox_version }}'

# Geckodriver
- name: Check if geckodriver is installed
  shell: geckodriver --version | head -n1 | cut -d" " -f2
  register: geckodriver_installed_version
  ignore_errors: True

- name: "Browsers: geckodriver: download"
  get_url:
    url="https://github.com/mozilla/geckodriver/releases/download/v{{ geckodriver_version }}/{{ geckodriver_file_name }}"
    dest=/tmp
    checksum="sha512:{{ geckodriver_checksum }}"
  when: geckodriver_installed_version.stdout != '{{ geckodriver_version }}'

- name: "Browsers: geckodriver: install"
  become: yes
  unarchive:
    src: /tmp/{{ geckodriver_file_name }}
    dest: /usr/local/bin
    remote_src: yes
  when: geckodriver_installed_version.stdout != '{{ geckodriver_version }}'

- name: "Browsers: geckodriver: check is installed"
  shell: geckodriver --version | head -n1 | cut -d" " -f2


# PhantomJS
- name: "Browsers: install PhantomJS"
  become: yes
  apt:
    name=phantomjs
    state=present
